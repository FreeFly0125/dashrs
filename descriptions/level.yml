---
struct: 'Level<''src>'
map_like: true
separator: ':'
indices:
  - value: 1
    type: u64
    maps_to: level_id
  - value: 2
    type: '&''src str'
    maps_to: name
  - value: 3
    type: 'Base64Decoded<''src>'
    maps_to: description
    thunk: true
    optional: true
  - value: 5
    type: u32
    maps_to: version
  - value: 6
    type: u64
    maps_to: creator
  - value: 25
    type: bool
    attributes:
      - 'serialize_with = "crate::util::false_to_empty_string"'
    compute: |
      self.difficulty == LevelRating::Auto
  - value: 8
    type: bool
    attributes:
      - 'serialize_with = "crate::util::true_to_ten"'
    compute: |
      self.difficulty != LevelRating::NotAvailable
  - value: 9
    type: i32
    compute: |
      self.difficulty.into_response_value()
  - value: 17
    type: bool
    attributes:
      - 'serialize_with = "crate::util::false_to_empty_string"'
    compute: |
      self.difficulty.is_demon()
  - value: 10
    type: u32
    maps_to: downloads
  - value: 12
    type: u8
    compute: |
      self.main_song.map(|song| song.main_song_id).unwrap_or(0)
  - value: 13
    type: u8
    maps_to: gd_version
    use_into: true
  - value: 14
    type: i32
    maps_to: likes
  - value: 15
    type: LevelLength
    maps_to: length
    attributes:
      - 'with = "level_length"'
  - value: 18
    type: u8
    maps_to: stars
  - value: 19
    type: Featured
    maps_to: featured
  - value: 30
    type: Option<u64>
    maps_to: copy_of
    attributes:
      - 'with = "crate::util::default_to_none"'
  - value: 31
    type: bool
    maps_to: two_player
  - value: 35
    type: Option<u64>
    maps_to: custom_song
    attributes:
      - 'with = "crate::util::default_to_none"'
  - value: 37
    type: u8
    maps_to: coin_amount
  - value: 38
    type: bool
    maps_to: coins_verified
  - value: 39
    type: Option<u8>
    maps_to: stars_requested
    attributes:
      - 'with = "crate::util::default_to_none"'
  - value: 42
    type: bool
    maps_to: is_epic
  - value: 43
    type: u8
    compute: |
      match self.difficulty {
          LevelRating::Demon(DemonRating::Easy) => 3,
          LevelRating::Demon(DemonRating::Medium) => 4,
          LevelRating::Demon(DemonRating::Hard) => 0,
          LevelRating::Demon(DemonRating::Insane) => 5,
          LevelRating::Demon(DemonRating::Extreme) => 6,
          _ => 5, // this seems to be the default for non-demons
      }
  - value: 45
    type: Option<u32>
    maps_to: object_amount
    attributes:
      - 'with = "crate::util::default_to_none"'
  - value: 46
    type: 'Option<&''src str>'
    maps_to: index_46
  - value: 47
    type: 'Option<&''src str>'
    maps_to: index_47
  - value: 4
    type: Objects
    thunk: true
    compute: |
      &*self.level_data.level_data.as_unprocessed().map_err(SerError::custom)?
  - value: 27
    type: Password
    thunk: true
    compute: |
      &*self.level_data.password.as_unprocessed().map_err(SerError::custom)?
  - value: 28
    type: '&''src str'
    compute: |
      self.level_data.time_since_upload.borrow()
  - value: 29
    type: '&''src str'
    compute: |
      self.level_data.time_since_update.borrow()
  - value: 36
    type: 'Option<&''src str>'
    compute: |
      self.level_data.index_36.as_deref()
special_fields:
  main_song: |
    if internal.index_35.is_some() { // custom_song
        None
    } else {
        Some(MainSong::from(internal.index_12)) // main_song
    }
  difficulty: |
    if !internal.index_8 { // has_difficulty_rating
        LevelRating::NotAvailable
    } else if internal.index_25 { // is_auto
        LevelRating::Auto
    } else if internal.index_17 { // is_demon
        LevelRating::Demon(DemonRating::from_response_value(internal.index_9))
    } else {
        LevelRating::from_response_value(internal.index_9) // rating
    }
  level_data: |
    LevelData {
      level_data: Thunk::Unprocessed(Cow::Borrowed(internal.index_4)),
      password: Thunk::Unprocessed(Cow::Borrowed(internal.index_27)),
      time_since_upload: Cow::Borrowed(internal.index_28),
      time_since_update: Cow::Borrowed(internal.index_29),
      index_36: internal.index_36.map(Cow::Borrowed)
    }